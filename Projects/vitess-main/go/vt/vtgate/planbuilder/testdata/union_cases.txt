# union all between two scatter selects
"select id from user union all select id from music"
{
  "QueryType": "SELECT",
  "Original": "select id from user union all select id from music",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select id from `user` where 1 != 1 union all select id from music where 1 != 1",
    "Query": "select id from `user` union all select id from music",
    "Table": "`user`"
  }
}
Gen4 plan same as above

# union distinct between two scatter selects
"select id from user union select id from music"
{
  "QueryType": "SELECT",
  "Original": "select id from user union select id from music",
  "Instructions": {
    "OperatorType": "Distinct",
    "Inputs": [
      {
        "OperatorType": "Concatenate",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "SelectScatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select id from `user` where 1 != 1",
            "Query": "select id from `user`",
            "Table": "`user`"
          },
          {
            "OperatorType": "Route",
            "Variant": "SelectScatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select id from music where 1 != 1",
            "Query": "select id from music",
            "Table": "music"
          }
        ]
      }
    ]
  }
}
Gen4 plan same as above

# union all between two SelectEqualUnique
"select id from user where id = 1 union all select id from user where id = 5"
{
  "QueryType": "SELECT",
  "Original": "select id from user where id = 1 union all select id from user where id = 5",
  "Instructions": {
    "OperatorType": "Concatenate",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectEqualUnique",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select id from `user` where 1 != 1",
        "Query": "select id from `user` where id = 1",
        "Table": "`user`",
        "Values": [
          1
        ],
        "Vindex": "user_index"
      },
      {
        "OperatorType": "Route",
        "Variant": "SelectEqualUnique",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select id from `user` where 1 != 1",
        "Query": "select id from `user` where id = 5",
        "Table": "`user`",
        "Values": [
          5
        ],
        "Vindex": "user_index"
      }
    ]
  }
}
Gen4 plan same as above

#almost dereks query - two queries with order by and limit being scattered to two different sets of tablets
"(SELECT id FROM user ORDER BY id DESC LIMIT 1) UNION ALL (SELECT id FROM music ORDER BY id DESC LIMIT 1)"
{
  "QueryType": "SELECT",
  "Original": "(SELECT id FROM user ORDER BY id DESC LIMIT 1) UNION ALL (SELECT id FROM music ORDER BY id DESC LIMIT 1)",
  "Instructions": {
    "OperatorType": "Concatenate",
    "Inputs": [
      {
        "OperatorType": "Limit",
        "Count": 1,
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "SelectScatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select id, weight_string(id) from `user` where 1 != 1",
            "OrderBy": "(0|1) DESC",
            "Query": "select id, weight_string(id) from `user` order by id desc limit :__upper_limit",
            "ResultColumns": 1,
            "Table": "`user`"
          }
        ]
      },
      {
        "OperatorType": "Limit",
        "Count": 1,
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "SelectScatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select id, weight_string(id) from music where 1 != 1",
            "OrderBy": "(0|1) DESC",
            "Query": "select id, weight_string(id) from music order by id desc limit :__upper_limit",
            "ResultColumns": 1,
            "Table": "music"
          }
        ]
      }
    ]
  }
}
Gen4 plan same as above

# Union all
"select col1, col2 from user union all select col1, col2 from user_extra"
{
  "QueryType": "SELECT",
  "Original": "select col1, col2 from user union all select col1, col2 from user_extra",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select col1, col2 from `user` where 1 != 1 union all select col1, col2 from user_extra where 1 != 1",
    "Query": "select col1, col2 from `user` union all select col1, col2 from user_extra",
    "Table": "`user`"
  }
}
Gen4 plan same as above

# union operations in subqueries (FROM)
"select * from (select * from user union all select * from user_extra) as t"
{
  "QueryType": "SELECT",
  "Original": "select * from (select * from user union all select * from user_extra) as t",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select * from (select * from `user` where 1 != 1 union all select * from user_extra where 1 != 1) as t where 1 != 1",
    "Query": "select * from (select * from `user` union all select * from user_extra) as t",
    "Table": "`user`"
  }
}

# union all between two scatter selects, with order by
"(select id from user order by id limit 5) union all (select id from music order by id desc limit 5)"
{
  "QueryType": "SELECT",
  "Original": "(select id from user order by id limit 5) union all (select id from music order by id desc limit 5)",
  "Instructions": {
    "OperatorType": "Concatenate",
    "Inputs": [
      {
        "OperatorType": "Limit",
        "Count": 5,
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "SelectScatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select id, weight_string(id) from `user` where 1 != 1",
            "OrderBy": "(0|1) ASC",
            "Query": "select id, weight_string(id) from `user` order by id asc limit :__upper_limit",
            "ResultColumns": 1,
            "Table": "`user`"
          }
        ]
      },
      {
        "OperatorType": "Limit",
        "Count": 5,
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "SelectScatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select id, weight_string(id) from music where 1 != 1",
            "OrderBy": "(0|1) DESC",
            "Query": "select id, weight_string(id) from music order by id desc limit :__upper_limit",
            "ResultColumns": 1,
            "Table": "music"
          }
        ]
      }
    ]
  }
}
Gen4 plan same as above

# union all on scatter and single route
"select id from user where id = 1 union select id from user where id = 1  union all select id from user"
{
  "QueryType": "SELECT",
  "Original": "select id from user where id = 1 union select id from user where id = 1  union all select id from user",
  "Instructions": {
    "OperatorType": "Concatenate",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectEqualUnique",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select id from `user` where 1 != 1 union select id from `user` where 1 != 1",
        "Query": "select id from `user` where id = 1 union select id from `user` where id = 1",
        "Table": "`user`",
        "Values": [
          1
        ],
        "Vindex": "user_index"
      },
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select id from `user` where 1 != 1",
        "Query": "select id from `user`",
        "Table": "`user`"
      }
    ]
  }
}
Gen4 plan same as above

# union of information_schema with normal table
"select * from information_schema.a union select * from unsharded"
{
  "QueryType": "SELECT",
  "Original": "select * from information_schema.a union select * from unsharded",
  "Instructions": {
    "OperatorType": "Distinct",
    "Inputs": [
      {
        "OperatorType": "Concatenate",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "SelectDBA",
            "Keyspace": {
              "Name": "main",
              "Sharded": false
            },
            "FieldQuery": "select * from information_schema.a where 1 != 1",
            "Query": "select * from information_schema.a",
            "Table": "information_schema.a"
          },
          {
            "OperatorType": "Route",
            "Variant": "SelectUnsharded",
            "Keyspace": {
              "Name": "main",
              "Sharded": false
            },
            "FieldQuery": "select * from unsharded where 1 != 1",
            "Query": "select * from unsharded",
            "Table": "unsharded"
          }
        ]
      }
    ]
  }
}
Gen4 plan same as above

# union of information_schema with normal table
"select * from unsharded union select * from information_schema.a"
{
  "QueryType": "SELECT",
  "Original": "select * from unsharded union select * from information_schema.a",
  "Instructions": {
    "OperatorType": "Distinct",
    "Inputs": [
      {
        "OperatorType": "Concatenate",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "SelectUnsharded",
            "Keyspace": {
              "Name": "main",
              "Sharded": false
            },
            "FieldQuery": "select * from unsharded where 1 != 1",
            "Query": "select * from unsharded",
            "Table": "unsharded"
          },
          {
            "OperatorType": "Route",
            "Variant": "SelectDBA",
            "Keyspace": {
              "Name": "main",
              "Sharded": false
            },
            "FieldQuery": "select * from information_schema.a where 1 != 1",
            "Query": "select * from information_schema.a",
            "Table": "information_schema.a"
          }
        ]
      }
    ]
  }
}
Gen4 plan same as above

# multi-shard union
"(select id from user union select id from music) union select 1 from dual"
{
  "QueryType": "SELECT",
  "Original": "(select id from user union select id from music) union select 1 from dual",
  "Instructions": {
    "OperatorType": "Distinct",
    "Inputs": [
      {
        "OperatorType": "Concatenate",
        "Inputs": [
          {
            "OperatorType": "Distinct",
            "Inputs": [
              {
                "OperatorType": "Concatenate",
                "Inputs": [
                  {
                    "OperatorType": "Route",
                    "Variant": "SelectScatter",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select id from `user` where 1 != 1",
                    "Query": "select id from `user`",
                    "Table": "`user`"
                  },
                  {
                    "OperatorType": "Route",
                    "Variant": "SelectScatter",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select id from music where 1 != 1",
                    "Query": "select id from music",
                    "Table": "music"
                  }
                ]
              }
            ]
          },
          {
            "OperatorType": "Route",
            "Variant": "SelectReference",
            "Keyspace": {
              "Name": "main",
              "Sharded": false
            },
            "FieldQuery": "select 1 from dual where 1 != 1",
            "Query": "select 1 from dual",
            "Table": "dual"
          }
        ]
      }
    ]
  }
}
Gen4 plan same as above

# multi-shard union
"select 1 from music union (select id from user union all select name from unsharded)"
{
  "QueryType": "SELECT",
  "Original": "select 1 from music union (select id from user union all select name from unsharded)",
  "Instructions": {
    "OperatorType": "Distinct",
    "Inputs": [
      {
        "OperatorType": "Concatenate",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "SelectScatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select 1 from music where 1 != 1",
            "Query": "select 1 from music",
            "Table": "music"
          },
          {
            "OperatorType": "Concatenate",
            "Inputs": [
              {
                "OperatorType": "Route",
                "Variant": "SelectScatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select id from `user` where 1 != 1",
                "Query": "select id from `user`",
                "Table": "`user`"
              },
              {
                "OperatorType": "Route",
                "Variant": "SelectUnsharded",
                "Keyspace": {
                  "Name": "main",
                  "Sharded": false
                },
                "FieldQuery": "select `name` from unsharded where 1 != 1",
                "Query": "select `name` from unsharded",
                "Table": "unsharded"
              }
            ]
          }
        ]
      }
    ]
  }
}
Gen4 plan same as above

# multi-shard union
"select 1 from music union (select id from user union select name from unsharded)"
{
  "QueryType": "SELECT",
  "Original": "select 1 from music union (select id from user union select name from unsharded)",
  "Instructions": {
    "OperatorType": "Distinct",
    "Inputs": [
      {
        "OperatorType": "Concatenate",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "SelectScatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select 1 from music where 1 != 1",
            "Query": "select 1 from music",
            "Table": "music"
          },
          {
            "OperatorType": "Distinct",
            "Inputs": [
              {
                "OperatorType": "Concatenate",
                "Inputs": [
                  {
                    "OperatorType": "Route",
                    "Variant": "SelectScatter",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select id from `user` where 1 != 1",
                    "Query": "select id from `user`",
                    "Table": "`user`"
                  },
                  {
                    "OperatorType": "Route",
                    "Variant": "SelectUnsharded",
                    "Keyspace": {
                      "Name": "main",
                      "Sharded": false
                    },
                    "FieldQuery": "select `name` from unsharded where 1 != 1",
                    "Query": "select `name` from unsharded",
                    "Table": "unsharded"
                  }
                ]
              }
            ]
          }
        ]
      }
    ]
  }
}
Gen4 plan same as above

# union with the same target shard because of vindex
"select * from music where id = 1 union select * from user where id = 1"
{
  "QueryType": "SELECT",
  "Original": "select * from music where id = 1 union select * from user where id = 1",
  "Instructions": {
    "OperatorType": "Distinct",
    "Inputs": [
      {
        "OperatorType": "Concatenate",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "SelectEqualUnique",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select * from music where 1 != 1",
            "Query": "select * from music where id = 1",
            "Table": "music",
            "Values": [
              1
            ],
            "Vindex": "music_user_map"
          },
          {
            "OperatorType": "Route",
            "Variant": "SelectEqualUnique",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select * from `user` where 1 != 1",
            "Query": "select * from `user` where id = 1",
            "Table": "`user`",
            "Values": [
              1
            ],
            "Vindex": "user_index"
          }
        ]
      }
    ]
  }
}
Gen4 plan same as above

# union with different target shards
"select 1 from music where id = 1 union select 1 from music where id = 2"
{
  "QueryType": "SELECT",
  "Original": "select 1 from music where id = 1 union select 1 from music where id = 2",
  "Instructions": {
    "OperatorType": "Distinct",
    "Inputs": [
      {
        "OperatorType": "Concatenate",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "SelectEqualUnique",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select 1 from music where 1 != 1",
            "Query": "select 1 from music where id = 1",
            "Table": "music",
            "Values": [
              1
            ],
            "Vindex": "music_user_map"
          },
          {
            "OperatorType": "Route",
            "Variant": "SelectEqualUnique",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select 1 from music where 1 != 1",
            "Query": "select 1 from music where id = 2",
            "Table": "music",
            "Values": [
              2
            ],
            "Vindex": "music_user_map"
          }
        ]
      }
    ]
  }
}
Gen4 plan same as above

# multiple select statement have inner order by with union - TODO (systay) no need to send down ORDER BY if we are going to loose it with UNION DISTINCT
"(select 1 from user order by 1 desc) union (select 1 from user order by 1 asc)"
{
  "QueryType": "SELECT",
  "Original": "(select 1 from user order by 1 desc) union (select 1 from user order by 1 asc)",
  "Instructions": {
    "OperatorType": "Distinct",
    "Inputs": [
      {
        "OperatorType": "Concatenate",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "SelectScatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select 1, weight_string(1) from `user` where 1 != 1",
            "OrderBy": "(0|1) DESC",
            "Query": "select 1, weight_string(1) from `user` order by 1 desc",
            "ResultColumns": 1,
            "Table": "`user`"
          },
          {
            "OperatorType": "Route",
            "Variant": "SelectScatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select 1, weight_string(1) from `user` where 1 != 1",
            "OrderBy": "(0|1) ASC",
            "Query": "select 1, weight_string(1) from `user` order by 1 asc",
            "ResultColumns": 1,
            "Table": "`user`"
          }
        ]
      }
    ]
  }
}
Gen4 plan same as above

# multiple unions
"select 1 union select null union select 1.0 union select '1' union select 2 union select 2.0 from user"
{
  "QueryType": "SELECT",
  "Original": "select 1 union select null union select 1.0 union select '1' union select 2 union select 2.0 from user",
  "Instructions": {
    "OperatorType": "Distinct",
    "Inputs": [
      {
        "OperatorType": "Concatenate",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "SelectReference",
            "Keyspace": {
              "Name": "main",
              "Sharded": false
            },
            "FieldQuery": "select 1 from dual where 1 != 1 union select null from dual where 1 != 1 union select 1.0 from dual where 1 != 1 union select '1' from dual where 1 != 1 union select 2 from dual where 1 != 1",
            "Query": "select 1 from dual union select null from dual union select 1.0 from dual union select '1' from dual union select 2 from dual",
            "Table": "dual"
          },
          {
            "OperatorType": "Route",
            "Variant": "SelectScatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select 2.0 from `user` where 1 != 1",
            "Query": "select 2.0 from `user`",
            "Table": "`user`"
          }
        ]
      }
    ]
  }
}
Gen4 plan same as above

# union distinct between a scatter query and a join (other side)
"(select user.id, user.name from user join user_extra where user_extra.extra = 'asdf') union select 'b','c' from user"
{
  "QueryType": "SELECT",
  "Original": "(select user.id, user.name from user join user_extra where user_extra.extra = 'asdf') union select 'b','c' from user",
  "Instructions": {
    "OperatorType": "Distinct",
    "Inputs": [
      {
        "OperatorType": "Concatenate",
        "Inputs": [
          {
            "OperatorType": "Join",
            "Variant": "Join",
            "JoinColumnIndexes": "-1,-2",
            "TableName": "`user`_user_extra",
            "Inputs": [
              {
                "OperatorType": "Route",
                "Variant": "SelectScatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select `user`.id, `user`.`name` from `user` where 1 != 1",
                "Query": "select `user`.id, `user`.`name` from `user`",
                "Table": "`user`"
              },
              {
                "OperatorType": "Route",
                "Variant": "SelectScatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select 1 from user_extra where 1 != 1",
                "Query": "select 1 from user_extra where user_extra.extra = 'asdf'",
                "Table": "user_extra"
              }
            ]
          },
          {
            "OperatorType": "Route",
            "Variant": "SelectScatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select 'b', 'c' from `user` where 1 != 1",
            "Query": "select 'b', 'c' from `user`",
            "Table": "`user`"
          }
        ]
      }
    ]
  }
}
Gen4 plan same as above

# union distinct between a scatter query and a join (other side)
"select 'b','c' from user union (select user.id, user.name from user join user_extra where user_extra.extra = 'asdf')"
{
  "QueryType": "SELECT",
  "Original": "select 'b','c' from user union (select user.id, user.name from user join user_extra where user_extra.extra = 'asdf')",
  "Instructions": {
    "OperatorType": "Distinct",
    "Inputs": [
      {
        "OperatorType": "Concatenate",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "SelectScatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select 'b', 'c' from `user` where 1 != 1",
            "Query": "select 'b', 'c' from `user`",
            "Table": "`user`"
          },
          {
            "OperatorType": "Join",
            "Variant": "Join",
            "JoinColumnIndexes": "-1,-2",
            "TableName": "`user`_user_extra",
            "Inputs": [
              {
                "OperatorType": "Route",
                "Variant": "SelectScatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select `user`.id, `user`.`name` from `user` where 1 != 1",
                "Query": "select `user`.id, `user`.`name` from `user`",
                "Table": "`user`"
              },
              {
                "OperatorType": "Route",
                "Variant": "SelectScatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select 1 from user_extra where 1 != 1",
                "Query": "select 1 from user_extra where user_extra.extra = 'asdf'",
                "Table": "user_extra"
              }
            ]
          }
        ]
      }
    ]
  }
}
Gen4 plan same as above

# ambiguous LIMIT
"select id from user limit 1 union all select id from music limit 1"
"Incorrect usage of UNION and LIMIT - add parens to disambiguate your query (errno 1221) (sqlstate 21000)"
Gen4 plan same as above

# different number of columns
"select id, 42 from user where id = 1 union all select id from user where id = 5"
"The used SELECT statements have a different number of columns (errno 1222) (sqlstate 21000) during query: select id, 42 from `user` where id = 1 union all select id from `user` where id = 5"
Gen4 plan same as above
